apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: stable-ingress
  annotations:
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '10'
    #alb.ingress.kubernetes.io/load-balancer-attributes: routing.http2.enabled=true
    alb.ingress.kubernetes.io/healthcheck-path: /
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '3'
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
    alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-FS-1-2-Res-2020-10
    alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:eu-central-1:238720913587:certificate/0e9fab66-7031-46dd-9014-7a445bc70880"
    alb.ingress.kubernetes.io/scheme: internal
    alb.ingress.kubernetes.io/group.name: "canary-group"
    alb.ingress.kubernetes.io/force-target-group-creation: "true"
    alb.ingress.kubernetes.io/target-group-name: argoalb-tg
    external-dns.alpha.kubernetes.io/hostname: argoalb.xfm.sws.siemens.com
    alb.ingress.kubernetes.io/target-type: ip
    kubernetes.io/ingress.class: alb
    #alb.ingress.kubernetes.io/conditions.canary: >
      #[{"field":"http-header","httpHeaderConfig":{"httpHeaderName": "canary", "values":["true"]}}]
    #alb.ingress.kubernetes.io/conditions.stable: >
      #[{"field":"http-header","httpHeaderConfig":{"httpHeaderName": "stable", "values":["true"]}}]
    alb.ingress.kubernetes.io/actions.header-route: |
      {
        "type": "forward",
        "forwardConfig": {
          "targetGroups": [
            {
              "serviceName": "canary-service",
              "servicePort": "80",
              "weight": 80
            },
            {
              "serviceName": "stable-service",
              "servicePort": "80",
              "weight": 20
            }
          ]
        }
      }
    alb.ingress.kubernetes.io/conditions.header-route: |
      [
        {
          "field": "http-header",
          "httpHeaderConfig": {
            "httpHeaderName": "X-Version",
            "values": ["canary"]
          }
        }
      ]  
spec:
  rules:
  - http:
      paths:
      # Default path (when no conditions match)
      - path: /
        pathType: Prefix
        backend:
          service:
            name: stable
            port:
              number: 80
              
      # Path for header-based routing
      - path: /
        pathType: Prefix
        backend:
          action: header-route            
