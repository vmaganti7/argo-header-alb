apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: header-based-ingress
  annotations:
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '10'
    alb.ingress.kubernetes.io/healthcheck-path: /
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '3'
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
    alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-FS-1-2-Res-2020-10
    alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:eu-central-1:238720913587:certificate/0e9fab66-7031-46dd-9014-7a445bc70880"
    alb.ingress.kubernetes.io/scheme: internal
    alb.ingress.kubernetes.io/force-target-group-creation: "true"
    alb.ingress.kubernetes.io/target-group-name: argoalb-tg
    external-dns.alpha.kubernetes.io/hostname: argoalb.xfm.sws.siemens.com
    alb.ingress.kubernetes.io/target-group-attributes: >-
      deregistration_delay.timeout_seconds=120
    alb.ingress.kubernetes.io/target-type: ip
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/actions.header-based-route: |
      {
        "Type": "forward",
        "ForwardConfig": {
          "TargetGroups": [
            {
              "ServiceName": "stable-svc",
              "ServicePort": "80",
              "Weight": 100
            },
            {
              "ServiceName": "canary-svc",
              "ServicePort": "80",
              "Weight": 0
            }
          ]
        }
      }
    alb.ingress.kubernetes.io/conditions.header-based-route: |
      [
        {
          "Field": "http-header",
          "HttpHeaderConfig": {
            "HttpHeaderName": "X-Canary",
            "Values": ["true"]
          }
        }
      ]
spec:
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: stable-svc
            port:
              number: 80
